Hướng dẫn cài đặt và chạy OA-SLAM 

Tai OA-SLAM 

git clone https://gitlab.inria.fr/tangram/oa-slam OA-SLAM --recursive 

Cài các ứng dụng kèm theo 

# Cài đặt các công cụ cần thiết 

sudo apt-get update 

sudo apt-get install build-essential cmake git 

# 1. Cài đặt Pangolin 

sudo apt-get install libglew-dev libboost-dev libboost-thread-dev libboost-filesystem-dev 

git clone https://github.com/stevenlovegrove/Pangolin.git 

cd Pangolin 

mkdir build && cd build 

cmake .. 

make -j4 

sudo make install 

cd ../.. 

# Cập nhật cache của thư viện động 

sudo ldconfig 

 

# 2. Cài đặt OpenCV (phiên bản >= 4) 

sudo apt-get install libgtk-3-dev libavcodec-dev libavformat-dev libswscale-dev libavutil-dev libavresample-dev 

git clone https://github.com/opencv/opencv.git 

git clone https://github.com/opencv/opencv_contrib.git	 

 

 

# Chuyển đến phiên bản ổn định (tùy chọn) 

 

cd opencv 

git checkout 4.5.5 

cd ../opencv_contrib 

git checkout 4.5.5 

cd .. 

 

# Tạo thư mục build 

cd opencv 

mkdir -p build 

cd build 

 
 

# Cấu hình OpenCV với CMake 

cmake -D CMAKE_BUILD_TYPE=RELEASE \ 

      -D CMAKE_INSTALL_PREFIX=/usr/local \ 

      -D OPENCV_EXTRA_MODULES_PATH=~/opencv_build/opencv_contrib/modules \ 

      -D WITH_GTK=ON \ 

      -D WITH_GTK_2_X=ON \ 

      -D BUILD_EXAMPLES=OFF \ 

      -D INSTALL_PYTHON_EXAMPLES=OFF \ 

      -D BUILD_opencv_python3=ON \ 

      .. 

 
 

# Biên dịch và cài đặt 

make -j4 

sudo make install 

sudo ldconfig 

 

# 3. Cài đặt Eigen3 

sudo apt-get install libeigen3-dev 

# 4. Cài đặt Dlib 

git clone https://github.com/davisking/dlib.git 

cd dlib 

mkdir build && cd build 

cmake .. 

make -j4 

sudo make install 

cd ../.. 

# 5. Cài đặt Protocol Buffers 

sudo apt-get install libprotobuf-dev protobuf-compiler 

 

 

Build project 

# Biên dịch 

mkdir build && cd build 

cmake .. 

make -j4 

 
Nếu gặp lỗi có dòng này fix như sau: 

Nếu gặp lỗi có dòng này: 
  204 |       static_assert(is_same<typename _Alloc::value_type, _Value>{}, 

      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

Nguyên nhân 

Vấn đề là do sự không tương thích giữa kiểu dữ liệu của unordered_map và aligned_allocator. Trong C++11 trở lên, unordered_map sử dụng std::pair<KeyFrame* const, Matrix> nhưng aligned_allocator được khai báo với std::pair<const KeyFrame*, Matrix> (thứ tự của const khác nhau). 

 
sửa file OA-SLAM/include/ObjectTrack.h 

Sửa giống file trong link bên dưới: 

https://drive.google.com/drive/folders/1t5QMyeeKsXBnNwwav9v0as0Ufb71qmIy?usp=sharing 

Sửa xong build lại 

   cd build 

   make -j4 

 

4. Run dự án 

Tải dữ liệu: 

Các link tải data  

+ link 1: 

https://vision.in.tum.de/rgbd/dataset/freiburg1/rgbd_dataset_freiburg1_xyz.tgz 

+ link 2: 

https://entrepot.recherche.data.gouv.fr/dataset.xhtml?persistentId=doi:10.12763/2CZWJP# 

Run: sửa đường dẫn trong file ARViewer.cc 

 

 sửa đường dẫn như  

 

 

 

command dạng 

 

 

Ví dụ: 

manh@hust:~/OA-SLAM$ ./bin/oa-slam  

Vocabulary/ORBvoc.txt Cameras/TUM2.yaml 	~/data/tum_fr2_desk/rgbd_dataset_freiburg2_desk Data/detections_ 

yolov5_tum_rgbd_fr2_desk.json   

Data/ignore_statue_parts.txt  

points+objects  

output_fr2_desk 

tham khảo link: https://gitlab.inria.fr/tangram/oa-slam 





make[2]: *** No rule to make target '/usr/lib/aarch64-linux-gnu/libsqlite3.so', needed by '../lib/libORB_SLAM2.so'.  Stop.
make[1]: *** [CMakeFiles/Makefile2:104: CMakeFiles/ORB_SLAM2.dir/all] Error 2
make: *** [Makefile:91: all] Error 2

 ./oa-slam ../Vocabulary/ORBvoc.txt ../Cameras/TUM2.yaml ../Data/rgbd_dataset_freiburg2_desk/rgb.txt ../Data/detections_yolov5_tum_rgbd_fr2_desk.json null points+objects fr2





./oa-slam ../Vocabulary/ORBvoc.txt ../Cameras/TUM2.yaml ../Data/rgbd_dataset_freiburg2_desk/rgb.txt ../Data/yolov5nu.onnx null points+objects fr2
C++ version: 201703
Warning !! Failed to open the file with ignore classes. No class will be ignore.
[ERROR:0@0.192] global /home/techvico/opencv_build/opencv/modules/dnn/src/onnx/onnx_importer.cpp (906) handleNode DNN/ONNX: ERROR during processing node with 2 inputs and 1 outputs: [Reshape]:(/model.24/dfl/Reshape_output_0) from domain='ai.onnx'
terminate called after throwing an instance of 'cv::Exception'
  what():  OpenCV(4.5.5) /home/techvico/opencv_build/opencv/modules/dnn/src/onnx/onnx_importer.cpp:928: error: (-2:Unspecified error) in function 'handleNode'
> Node [Reshape@ai.onnx]:(/model.24/dfl/Reshape_output_0) parse error: OpenCV(4.5.5) /home/techvico/opencv_build/opencv/modules/dnn/src/layers/reshape_layer.cpp:107: error: (-215:Assertion failed) total(srcShape, srcRange.start, srcRange.end) == maskTotal in function 'computeShapeByReshapeMask'
> 
Aborted (core dumped)


[ WARN:0@9.398] global /home/techvico/opencv_build/opencv/modules/dnn/src/dnn.cpp (1483) setUpNet DNN module was not built with CUDA backend; switching to CPU
terminate called after throwing an instance of 'cv::Exception'
  what():  OpenCV(4.5.5) /home/techvico/opencv_build/opencv/modules/dnn/include/opencv2/dnn/shape_utils.hpp:170: error: (-215:Assertion failed) start <= (int)shape.size() && end <= (int)shape.size() && start <= end in function 'total'

Aborted (core dumped)ov5$ python export.py --weights yolov5m.pt --include onnx --opset 12 --simplify --imgsz 320
https://drive.google.com/file/d/19iEqqPhI5i9Scp6LSdyODFCZm066Y3G2/view
sudo ln -s /dev/video4 /dev/webcam_4


https://chatgpt.com/share/67c802c3-2680-8008-a882-df01e2c433d9 






/**
 * oakd-test.cc
 * 
 * Chương trình đơn giản sử dụng DepthAI và OpenCV để mở kết nối với OAK-D,
 * hiển thị stream video từ camera RGB và camera mono (trái).
 *
 * Yêu cầu:
 *  - Cài đặt DepthAI (https://github.com/luxonis/depthai)
 *  - Cài đặt OpenCV (phiên bản 3.0 trở lên)
 *
 * Biên dịch (ví dụ trên Linux):
 *   g++ -std=c++17 oakd-test.cc -o oakd-test `pkg-config --cflags --libs opencv4` -ldepthai
 */

#include <iostream>
#include <chrono>
#include <opencv2/opencv.hpp>
#include <depthai/depthai.hpp>

int main() {
    try {
        // Tạo pipeline cho thiết bị DepthAI
        dai::Pipeline pipeline;

        // --- Cấu hình camera RGB ---
        auto colorCam = pipeline.create<dai::node::ColorCamera>();
        // Bạn có thể cấu hình độ phân giải, kích thước preview nếu cần
        colorCam->setBoardSocket(dai::CameraBoardSocket::RGB);
        // Sử dụng stream video để lấy frame chất lượng gốc
        auto xoutColor = pipeline.create<dai::node::XLinkOut>();
        xoutColor->setStreamName("color");
        // Liên kết output video của colorCam với xoutColor
        colorCam->video.link(xoutColor->input);

        // --- Cấu hình camera mono (trái) ---
        auto monoLeft = pipeline.create<dai::node::MonoCamera>();
        monoLeft->setBoardSocket(dai::CameraBoardSocket::LEFT);
        // Cấu hình độ phân giải của mono camera (có thể chọn độ phân giải khác)
        monoLeft->setResolution(dai::MonoCameraProperties::SensorResolution::THE_400_P);
        auto xoutMono = pipeline.create<dai::node::XLinkOut>();
        xoutMono->setStreamName("mono");
        // Liên kết output của monoLeft với xoutMono
        monoLeft->out.link(xoutMono->input);

        // Khởi tạo thiết bị với pipeline đã cấu hình
        dai::Device device(pipeline);

        // Lấy queue dữ liệu video từ các stream
        auto colorQueue = device.getOutputQueue("color", 30, false);
        auto monoQueue  = device.getOutputQueue("mono", 30, false);

        std::cout << "Kết nối thành công. Nhấn ESC để thoát." << std::endl;

        // Vòng lặp lấy và hiển thị frame từ các camera
        while (true) {
            // Lấy frame từ camera RGB
            auto inColorFrame = colorQueue->get<dai::ImgFrame>();
            cv::Mat colorFrame = inColorFrame->getCvFrame();

            // Lấy frame từ camera mono
            auto inMonoFrame = monoQueue->get<dai::ImgFrame>();
            cv::Mat monoFrame = inMonoFrame->getCvFrame();

            // Hiển thị các frame trên cửa sổ riêng biệt
            cv::imshow("Camera RGB", colorFrame);
            cv::imshow("Camera Mono (Trái)", monoFrame);

            // Thoát nếu nhấn phím ESC (ASCII 27)
            if (cv::waitKey(1) == 27) {
                break;
            }
        }
    } catch (const std::exception &e) {
        std::cerr << "Lỗi: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}

./oa-slam-OAK-stereo ../Vocabulary/ORBvoc.txt /home/orin/oa-slam/Cameras/D435i_scale_stereo_ORB2.yaml /home/orin/oa-slam/Data/yolov5n-seg.onnx null points+objects


https://app.roboflow.com/duchoang-0acbc/office-fqbdc/upload




https://drive.google.com/drive/folders/1FwF4D2h7IQJWXxZx_NUrj4pIp_PsaaIE?usp=drive_link



source /opt/ros/humble/setup.bash
source ~/ros2_ws/install/setup.bash
ros2 launch realsense2_camera rs_launch.py   device_type:=d435i   enable_color:=true   enable_depth:=true   enable_infra1:=true   enable_infra2:=true   enable_gyro:=false   enable_accel:=false

ros2 run rqt_image_view rqt_image_view

