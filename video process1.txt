@Slot()
    def trackBallTrajectory(self):
        # Dùng frame mới nhất trong buffer để tracking

        ball_track = []
        ball2 = self.pickle_vision.track_ball2(self.frames[-1])
        if ball2:
            result = ball2[1]
            ball_track.append(((result[0] + result[2]) / 2, (result[1] + result[3]) / 2))
        else:
            ball_track.append((None, None))


        # Đảm bảo ball_trajectory có số phần tử tương ứng với số frame đã xử lý
        while len(self.frames) > len(self.ball_trajectory):
            self.ball_trajectory.append((None, None))

        # Cập nhật ball_trajectory như cũ
        MAX_TRAJECTORY = 30  # Số điểm trong cửa sổ bounce detect
        OVERLAP = 15        # Sau bounce detect, giữ lại 25 điểm cuối làm overlap
        self.ball_trajectory.append(ball_track[-1])
        if len(self.ball_trajectory) > MAX_TRAJECTORY:
            self.ball_trajectory = self.ball_trajectory[-MAX_TRAJECTORY:]

        # Làm mượt quỹ đạo
        x_track, y_track = self.pickle_vision.smooth_ball_track(self.ball_trajectory)
        if self.ball_trajectory[-1] == (None, None) and x_track[-1] is not None:
            self.ball_trajectory[-1] = (x_track[-1], y_track[-1])
        x_track = [x if x is not None else 0 for x in x_track]
        y_track = [y if y is not None else 0 for y in y_track]

        MAX_BOUNCES = 10  # Giới hạn số lượng bounce tối đa (hoặc số phần tử bạn muốn)


        # Chạy bounce detect trên cửa sổ hiện tại
        self.bounces = self.pickle_vision.bounce_detect(self.ball_trajectory)
        if len(self.bounces) > MAX_BOUNCES:
            self.bounces = self.bounces[-MAX_BOUNCES:]  # Chỉ giữ lại MAX_BOUNCES phần tử cuối cùng
        # Tính chỉ số global: cửa sổ ball_trajectory đại diện cho các frame từ:
        # global_frame_start = self.current_frame - len(self.ball_trajectory) + 1 đến self.current_frame.
        # Tính chỉ số global: cửa sổ ball_trajectory đại diện cho các frame từ:
        global_frame_start = self.current_frame - len(self.ball_trajectory) + 1
        global_bounces = [global_frame_start + idx for idx in self.bounces]

        # Giới hạn số lượng global_bounces cần xử lý
        if len(global_bounces) > MAX_BOUNCES:
            global_bounces = global_bounces[-MAX_BOUNCES:]

        #self.bouncesDetected.emit([(gb, x_track[idx], y_track[idx]) for idx, gb in zip(self.bounces, global_bounces)])

        try:
            self.ballDetected.emit(
                self.current_frame,
                self.ball_trajectory[-1][0],
                self.ball_trajectory[-1][1]
            )
        except Exception as e:
            print(f"ball track {self.current_frame} out of range: {len(self.ball_trajectory)} - {e}")

        # Sau khi chạy bounce detect, giữ lại OVERLAP điểm cuối và xóa các điểm cũ
        if len(self.ball_trajectory) >= MAX_TRAJECTORY:
            self.ball_trajectory = self.ball_trajectory[-OVERLAP:]

        # Giải phóng bộ nhớ GPU nếu sử dụng GPU
        if torch.cuda.is_available():
            torch.cuda.empty_cache()

